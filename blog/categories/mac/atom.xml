<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mac | antoniolorusso.com]]></title>
  <link href="http://zekus.github.io/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://zekus.github.io/"/>
  <updated>2013-07-11T12:58:07+02:00</updated>
  <id>http://zekus.github.io/</id>
  <author>
    <name><![CDATA[Antonio Lorusso]]></name>
    <email><![CDATA[antonio.lorusso@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9.3-p125 and RVM on Mac]]></title>
    <link href="http://zekus.github.io/blog/2012/02/18/ruby-1-9-3-p125-and-rvm-on-mac/"/>
    <updated>2012-02-18T15:32:41+01:00</updated>
    <id>http://zekus.github.io/blog/2012/02/18/ruby-1-9-3-p125-and-rvm-on-mac</id>
    <content type="html"><![CDATA[<p>A <a href="http://www.ruby-lang.org/en/news/2012/02/16/ruby-1-9-3-p125-is-released/">new ruby version</a> is out and it&rsquo;s time to upgrade! The first try gave me this error:</p>

<p><code>
?  ~  rvm install 1.9.3-p125
Error running ' ./configure --prefix=/Users/antonio/.rvm/rubies/ruby-1.9.3-p125 --enable-shared --disable-install-doc --with-libyaml --with-opt-dir=/Users/antonio/.rvm/usr ', please read /Users/antonio/.rvm/log/ruby-1.9.3-p125/configure.log
There has been an error while running configure. Halting the installation.
</code></p>

<p>Adding the compiler option &ldquo;&mdash;with-gcc=clang&rdquo; worked:</p>

<p><code>
?  ~  rvm install 1.9.3-p125 --with-gcc=clang
Install of ruby-1.9.3-p125 - #complete
</code></p>

<p>enjoy Ruby :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nokogiri, RVM, Homebrew and headhache!!!]]></title>
    <link href="http://zekus.github.io/blog/2011/06/11/nokogiri-rvm-homebrew-and-headhache/"/>
    <updated>2011-06-11T14:32:48+02:00</updated>
    <id>http://zekus.github.io/blog/2011/06/11/nokogiri-rvm-homebrew-and-headhache</id>
    <content type="html"><![CDATA[<p>Thanks to a gist (which I forked and slightly changed) I was able to finally install Nokogiri on my mac:</p>

<p><div><script src='https://gist.github.com/1020543.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>If you had MacPorts previously installed, it might still not work so
<code>
sudo mv /opt/local /opt/local_old
</code>
and try again.</p>

<p>Enjoy :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenVPN at startup in OSX]]></title>
    <link href="http://zekus.github.io/blog/2011/05/09/openvpn-at-startup-in-osx/"/>
    <updated>2011-05-09T00:11:25+02:00</updated>
    <id>http://zekus.github.io/blog/2011/05/09/openvpn-at-startup-in-osx</id>
    <content type="html"><![CDATA[<p>The easiest way of getting an OpenVPN client on mac is with <a href="http://code.google.com/p/tunnelblick/wiki/DownloadsEntry?tm=2">Tunnelblick</a> but you will join the VPN only when you have logged in. Sometimes you need your mac to connect at startup instead and I&rsquo;ll show you how to do it:</p>

<p>create /etc/rc.local and copy/paste the following three lines in it:</p>

<p>```</p>

<h1>!/bin/bash</h1>

<p>/sbin/kextload /Applications/Tunnelblick.app/Contents/Resources/tap.kext
/sbin/kextload /Applications/Tunnelblick.app/Contents/Resources/tun.kext
```</p>

<p>then create a Launch script like this for each of the vpn you want to connect to, replacing <em>YOURVPNNAME</em>, <em>YOURCONFIGFILE</em>, <em>YOUR/CONFIG/FOLDER</em> accordingly:</p>

<p><code>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
&lt;key&gt;Label&lt;/key&gt;
&lt;string&gt;org.openvpn.YOURVPNNAME&lt;/string&gt;
&lt;key&gt;OnDemand&lt;/key&gt;
&lt;false/&gt;
&lt;key&gt;Program&lt;/key&gt;
&lt;string&gt;/Applications/Tunnelblick.app/Contents/Resources/openvpn&lt;/string&gt;
&lt;key&gt;ProgramArguments&lt;/key&gt;
&lt;array&gt;
&lt;string&gt;openvpn&lt;/string&gt;
&lt;string&gt;--config&lt;/string&gt;
&lt;string&gt;YOURCONFIGFILE.conf&lt;/string&gt;
&lt;/array&gt;
&lt;key&gt;RunAtLoad&lt;/key&gt;
&lt;true/&gt;
&lt;key&gt;TimeOut&lt;/key&gt;
&lt;integer&gt;90&lt;/integer&gt;
&lt;key&gt;WorkingDirectory&lt;/key&gt;
&lt;string&gt;YOUR/CONFIG/FOLDER&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></p>

<p>save each script into <em>/Library/LaunchDaemons/</em> folder using a name for the file like <em>org.openvpn.YOURVPNNAME.plist</em>, then change the user and group to root:wheel with the following command in a terminal window:</p>

<p><code>
sudo chown root:wheel /Library/LaunchDaemon/org.openvpn.YOURVPNNAME
</code></p>

<p>last commands to register and execute your Launch scripts are:</p>

<p><code>
sudo launchctl load /Library/LaunchDaemon/org.openvpn.YOURVPNNAME.plist
sudo launchctl start org.openvpn.YOURVPNNAME
</code></p>

<p>a restart should be the very last thing to do and once your mac has started you shoud be connected to your vpn network(s)!</p>

<p>enjoy ;)</p>

<p><strong>UPDATE: </strong>the new version of tunnelblick 3.2beta26 does have the the &ldquo;connect when computer starts&rdquo; functionality that automatically makes this post obsolete. I&rsquo;ll just keep it for the records :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macports, Snow Leopard and XCode 3.2]]></title>
    <link href="http://zekus.github.io/blog/2009/10/18/macports-snow-leopard-and-xcode-3-2/"/>
    <updated>2009-10-18T01:09:47+02:00</updated>
    <id>http://zekus.github.io/blog/2009/10/18/macports-snow-leopard-and-xcode-3-2</id>
    <content type="html"><![CDATA[<p>When I upgraded my macbook to Snow Leopard, macports just worked as it was before, or so I thought, until yesterday when I tried to install ImageMagick and rmagick ruby gem and I got this error:
<code>
gem install rmagick
ERROR:  Error installing rmagick:
ERROR: Failed to build gem native extension.
/opt/local/bin/ruby extconf.rb
checking for Ruby version &gt;= 1.8.5... yes
checking for gcc... yes
checking for Magick-config... yes
checking for ImageMagick version &gt;= 6.3.5... yes
checking for HDRI disabled version of ImageMagick... yes
checking for stdint.h... no
checking for sys/types.h... no
checking for wand/MagickWand.h... no
Can't install RMagick 2.11.1. Can't find MagickWand.h.
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of
necessary libraries and/or headers.  Check the mkmf.log file for more
details.  You may need configuration options.
Provided configuration options:
--with-opt-dir
--without-opt-dir
--with-opt-include
--without-opt-include=${opt-dir}/include
--with-opt-lib
--without-opt-lib=${opt-dir}/lib
--with-make-prog
--without-make-prog
--srcdir=.
--curdir
--ruby=/opt/local/bin/ruby
</code>
After having lost the best of my youth trying to fix this issue, I can&rsquo;t remember exactly how I did it, but I came up with this idea of reinstalling ruby and&hellip; guess what? It did work!
So the lesson here is &hellip; whenever you upgrade to a major release of XCode, you have to reinstall all your macports. These commands can save your day or two:
<code>
$ sudo port selfupdate
$ sudo port sync
$ sudo port upgrade --force installed
</code>
;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grep excluding .svn dirs]]></title>
    <link href="http://zekus.github.io/blog/2008/05/12/grep-excluding-svn-dirs/"/>
    <updated>2008-05-12T13:33:16+02:00</updated>
    <id>http://zekus.github.io/blog/2008/05/12/grep-excluding-svn-dirs</id>
    <content type="html"><![CDATA[<p>Grep is a fantastic search command that let you filter results and give you what you need. It is used to search in the content of files and is very useful for programmers like us :)</p>

<p>Typically, when you search in a directory recursively and you want to exclude hidden directory such as the .svn, you so this:
<code>
grep -ri "your password is" * | grep -v .
</code>
this waste time cause search in all directories including the ones you want to exclude and then remove the unwanted results.
This other method, is the correct and quickest one:
<code>
grep -r 'content_graphic' assets/js --exclude=*\.svn*
</code>
<strong>COOOL!</strong></p>

<p>If you want to make this permanent when you use grep, just put it in your profile file: on a Mac open ~/.profile with a text editor. If you&rsquo;re using Linux, edit ~/.bashrc or ~/.bash_profile or ~/.profile.</p>

<p>Add the following line to the top of the file:
<code>
export GREP_OPTIONS="--exclude=*\.svn*"
</code>
save and close!</p>

<p>Happy grepping to everybody ;)</p>
]]></content>
  </entry>
  
</feed>
